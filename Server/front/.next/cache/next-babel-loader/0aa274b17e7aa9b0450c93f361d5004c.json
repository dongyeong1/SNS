{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    console.log('123455', action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post('/api/removePost', data);\n}\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI,action.data)\n    // console.log('123455',action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchremovePost() {\n  yield takeLatest(ADD_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchremovePost)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeLatest","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","addComment","console","log","removePostAPI","removePost","watchAddPost","watchAddComment","watchremovePost","postSaga"],"sources":["/Users/dong/DockerReact/pepare/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport { all ,call,delay,fork, put, takeLatest} from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n\n} from '../reducers/post'\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data){\n    return axios.post('/api/post',data)\n}\n\nfunction* addPost(action)\n{\n    try{\n        // const result = yield call(addPostAPI,action.data)\n        \n        yield delay(1000)\n        const id=shortId.generate()\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:{\n                id,\n                content:action.data\n            }\n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:id\n        })\n    }catch(err){\n        yield put({\n            type:ADD_POST_FAILURE,\n            data:err.response.data\n        })\n\n    }\n}\n\nfunction addCommentAPI(data){\n    return axios.post('/api/comment',data)\n}\n\nfunction* addComment(action)\n{\n    try{\n        // const result = yield call(addPostAPI,action.data)\n        console.log('123455',action.data)\n        yield delay(1000)\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            data:err.response.data\n        })\n\n    }\n}\n\nfunction removePostAPI(data){\n    return axios.post('/api/removePost',data)\n}\n\nfunction* removePost(action)\n{\n    try{\n        // const result = yield call(addPostAPI,action.data)\n        // console.log('123455',action.data)\n        yield delay(1000)\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            data:err.response.data\n        })\n\n    }\n}\n\n\n\n\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\nfunction* watchremovePost(){\n    yield takeLatest(ADD_POST_REQUEST,removePost)\n}\n\n\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchremovePost)\n    ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}