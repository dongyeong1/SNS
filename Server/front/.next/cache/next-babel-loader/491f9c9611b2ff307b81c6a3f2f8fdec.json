{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n\n    // yield delay(1000)\n    // const id=shortId.generate()\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.log('errrrorrrrr', err.response.data);\n    yield put({\n      type: ADD_POST_FAILURE,\n      erorr: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    // console.log('123455',action.data)\n    // yield delay(1000)\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.post('/post/removePost', data);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    // console.log('123455',action.data)\n    // yield delay(1000)\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchremovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchremovePost)]);\n}","map":{"version":3,"names":["axios","all","call","delay","fork","put","takeLatest","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_TO_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","console","log","response","erorr","addCommentAPI","postId","addComment","removePostAPI","removePost","error","watchAddPost","watchAddComment","watchremovePost","postSaga"],"sources":["/Users/dong/DockerReact/Server/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\nimport { all ,call,delay,fork, put, takeLatest} from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport {\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    REMOVE_POST_REQUEST,\n\n} from '../reducers/post'\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data){\n    return axios.post('/post',{content:data})\n}\n\nfunction* addPost(action)\n{\n    try{\n        const result = yield call(addPostAPI,action.data)\n        \n        // yield delay(1000)\n        // const id=shortId.generate()\n        yield put({\n            type:ADD_POST_SUCCESS,\n            data:result.data\n        })\n        yield put({\n            type:ADD_POST_TO_ME,\n            data:result.data.id\n        })\n    }catch(err){\n        console.log('errrrorrrrr',err.response.data)\n        yield put({\n            type:ADD_POST_FAILURE,\n            erorr:err.response.data\n        })\n\n    }\n}\n\nfunction addCommentAPI(data){\n    return axios.post(`/post/${data.postId}/comment`,data)\n}\n\nfunction* addComment(action)\n{\n    try{\n        const result = yield call(addCommentAPI,action.data)\n        // console.log('123455',action.data)\n        // yield delay(1000)\n        yield put({\n            type:ADD_COMMENT_SUCCESS,\n            data:result.data\n        })\n    }catch(err){\n        yield put({\n            type:ADD_COMMENT_FAILURE,\n            data:err.response.data\n        })\n\n    }\n}\n\nfunction removePostAPI(data){\n    return axios.post('/post/removePost',data)\n}\n\nfunction* removePost(action)\n{\n    try{\n        const result = yield call(removePostAPI,action.data)\n        // console.log('123455',action.data)\n        // yield delay(1000)\n        yield put({\n            type:REMOVE_POST_SUCCESS,\n            data:result\n        })\n        yield put({\n            type:REMOVE_POST_TO_ME,\n            data:action.data\n        })\n    }catch(err){\n        yield put({\n            type:REMOVE_POST_FAILURE,\n            error:err.response.data\n        })\n\n    }\n}\n\n\n\n\n\nfunction* watchAddPost(){\n    yield takeLatest(ADD_POST_REQUEST,addPost)\n}\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment)\n}\nfunction* watchremovePost(){\n    yield takeLatest(REMOVE_POST_REQUEST,removePost)\n}\n\n\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n        fork(watchremovePost)\n    ])\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}