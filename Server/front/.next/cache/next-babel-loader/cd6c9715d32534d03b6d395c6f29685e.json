{"ast":null,"code":"var _jsxFileName = \"/Users/dong/DockerReact/Server/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n// import Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCardContent from './PostCardContent';\nimport CommentForm from './CommentForm';\n// import PostCardContent from './PostCardContent';\nimport PostImages from './PostImages';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, LOAD_POST_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    removepostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const postRemove = () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  };\n  const id = useSelector(state => {\n    var _state$user$me;\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  // const liked=post.Likers.find((v)=>v.id===id)\n\n  // if(post.Likers.length==0}){\n  //   console.log('as')\n  // }]\n  // if(post){\n  // const liked=post.Likers.find((v)=>v.id===id)\n  // }\n\n  // setTimeout(() => {\n  //   const liked=post.Likers.find((v)=>v.id===id)}\n  //   , 3000);\n\n  console.log('qweqwe', post.Likers);\n  // c\n\n  return __jsx(CardWrapper, {\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 34\n      }\n    }) //a&&b a가true면 b를 반환 a가false면 a반환\n    ,\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 23\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        onClick: postRemove,\n        loading: removepostLoading,\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    description: __jsx(PostCardContent, {\n      PostData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 24\n      }\n    }),\n    title: post.User.nickname\n    //   description={post.content}\n    //   description={<PostCardContent postData={post.content} />}\n    // }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar:\n      // <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n      __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 26\n        }\n      }, item.User.nickname[0]))\n      // </Link>\n      ,\n\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  })));\n};\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  })\n};\nexport default PostCard;","map":{"version":3,"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","useDispatch","useSelector","PostCardContent","CommentForm","PostImages","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","LOAD_POST_REQUEST","FollowButton","CardWrapper","div","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","removepostLoading","state","liked","setLiked","onLike","type","data","id","onUnLike","onToggleComment","prev","postRemove","user","me","console","log","Likers","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","any"],"sources":["/Users/dong/DockerReact/Server/front/components/PostCard.js"],"sourcesContent":["import React, { useState, useCallback,useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\n// import Link from 'next/link';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCardContent from './PostCardContent';\n\nimport CommentForm from './CommentForm';\n// import PostCardContent from './PostCardContent';\nimport PostImages from './PostImages';\nimport { REMOVE_POST_REQUEST ,LIKE_POST_REQUEST,UNLIKE_POST_REQUEST,LOAD_POST_REQUEST} from '../reducers/post';\nimport FollowButton from './FollowButton';\n\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n\n  const dispatch=useDispatch();\n\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  \n  const {removepostLoading}=useSelector((state)=>state.post)\n\n  const [liked, setLiked] = useState(false);\n\n\n  const onLike = useCallback(() => {\n    dispatch({\n      type:LIKE_POST_REQUEST,\n      data:post.id\n    })\n  }, []);\n  const onUnLike = useCallback(() => {\n    dispatch({\n      type:UNLIKE_POST_REQUEST,\n      data:post.id\n    })\n  }, []);\n\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  const postRemove=()=>{\n    dispatch({\n        type:REMOVE_POST_REQUEST,\n        data:post.id\n    })\n  }\n  const id = useSelector((state) => state.user.me?.id);\n  // const liked=post.Likers.find((v)=>v.id===id)\n  \n  // if(post.Likers.length==0}){\n  //   console.log('as')\n  // }]\n  // if(post){\n  // const liked=post.Likers.find((v)=>v.id===id)\n  // }\n \n\n  // setTimeout(() => {\n  //   const liked=post.Likers.find((v)=>v.id===id)}\n  //   , 3000);\n\n  console.log('qweqwe',post.Likers)\n  // c\n\n  return (\n    <CardWrapper key={post.id}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}//a&&b a가true면 b를 반환 a가false면 a반환\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n              liked\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnLike} />\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={(\n              <Button.Group>\n                {id && post.User.id === id\n                  ? (\n                    <>\n                      <Button>수정</Button>\n                      <Button onClick={postRemove} loading={removepostLoading} type=\"danger\">삭제</Button>\n                    </>\n                  )\n                  : <Button>신고</Button>}\n              </Button.Group>\n            )}\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        extra={id&&<FollowButton post={post} />}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          description={<PostCardContent PostData={post.content}></PostCardContent>}\n          title={post.User.nickname}\n        //   description={post.content}\n        //   description={<PostCardContent postData={post.content} />}\n        // }\n        />\n      </Card>\n      {commentFormOpened && (\n        <>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={(\n                    // <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                    // </Link>\n                  )}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </CardWrapper>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n  }),\n};\n\nexport default PostCard;"],"mappings":"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"},"metadata":{},"sourceType":"module"}